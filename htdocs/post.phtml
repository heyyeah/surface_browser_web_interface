<?php
require_once 'config.php';
require_once 'init.php';
require_once 'db_functions.php';
require_once 'link_functions.php';

set_headers();

// Constants
const HTTP = "http://";
const HTTPS = "https://";
$message = "";

function is_url($url_input)
{
    error_log("URL Validation - Input: " . $url_input);

    // Add https:// if no protocol specified
    if (!preg_match("~^(?:f|ht)tps?://~i", $url_input)) {
        $url_input = HTTPS . $url_input;
        error_log("URL Validation - Added protocol: " . $url_input);
    }

    $goodLink = false;

    if (strlen($url_input) > strlen(HTTP)) {
        $ip = "";
        if (preg_match("/^(https?:\/\/)?([^\/]+)/i", $url_input, $matches)) {
            $host = $matches[2];
            error_log("URL Validation - Extracted host: " . $host);
            $ip = gethostbyname($host);
            error_log("URL Validation - Resolved IP: " . $ip);
            if ($ip === $host) {
                error_log("URL Validation - DNS resolution failed");
                $ip = "";
            }
        }

        if (strlen($ip) > 0) {
            $ch = curl_init($url_input);
            // Set CURL options to better mimic a browser
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, 5);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_NOBODY, true);

            curl_exec($ch);
            $responseCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            error_log("URL Validation - Response Code: " . $responseCode);

            // Accept common response codes that indicate the site exists
            // 200: OK, 301/302: Redirect, 403: Forbidden (but exists), 401: Unauthorized (but exists)
            if ($responseCode >= 200 && $responseCode < 404) {
                $goodLink = true;
                error_log("URL Validation - URL is valid (Response: $responseCode)");
            }

            curl_close($ch);
        }
    }
    return $goodLink;
}

try {
    $db = connectToDatabase();

    // Handle form submission
    if (isset($_POST['submitBtn'])) {
        $address = $_POST['addressbar'] ?? '';
        $type = $_POST['type'] ?? '';

        $error = "";
        if ($type == "url") {
            $insertType = TYPE_URL;
            if (strncasecmp($address, HTTP, 7) != 0 && strncasecmp($address, HTTPS, 8) != 0) {
                $address = HTTPS . $address;
            }
            if (!is_url($address)) {
                $error = $address;
                $address = "";
            }
        } elseif ($type == "img") {
            $insertType = TYPE_IMAGE;
            if (strpos($address, ".") || strpos($address, "www")) {
                if (is_url($address)) {
                    $insertType = TYPE_URL;
                    if (strncasecmp($address, HTTP, 7) != 0 && strncasecmp($address, HTTPS, 8) != 0) {
                        $address = HTTPS . $address;
                    }
                }
            }
        } elseif ($type == "ai" && SB_ENABLE_AI_SEEDS) {
            $insertType = TYPE_AI;
            // No additional validation needed for AI prompts
        }

        if (strlen($address) > 0) {
            $stmt = $db->prepare("SELECT id FROM " . SB_DATA_TABLE . " WHERE (`type` < " . TYPE_ACCESSED . ") AND `type` = :type AND address = :address");
            // log query
            error_log("Query: " . $stmt->queryString);
            $stmt->execute(['type' => $insertType, 'address' => $address]);
            // log result
            error_log("Result: " . $stmt->rowCount());
            if ($stmt->rowCount() > 0) {
                $message = "Link \"" . htmlspecialchars($address) . "\" is already in queue.";
            } else {
                $stmt = $db->prepare("SELECT COUNT(*) FROM " . SB_DATA_TABLE);
                $stmt->execute();
                $count = $stmt->fetchColumn();
                if ($count < SB_MAXROWS) {
                    $stmt = $db->prepare("INSERT INTO " . SB_DATA_TABLE . " (type, accessed, modified, address) VALUES (:type, NOW(), NOW(), :address)");
                    $stmt->execute(['type' => $insertType, 'address' => $address]);
                } else {
                    $stmt = $db->prepare("SELECT id, modified FROM " . SB_DATA_TABLE . " WHERE id > :num_default_links ORDER BY modified ASC LIMIT 1");
                    $stmt->execute(['num_default_links' => SB_NUM_DEFAULT_LINKS]);
                    $row = $stmt->fetch(PDO::FETCH_ASSOC);
                    $id = $row['id'];
                    $stmt = $db->prepare("UPDATE " . SB_DATA_TABLE . " SET type = :type, accessed = NOW(), modified = NOW(), address = :address WHERE id = :id");
                    $stmt->execute(['type' => $insertType, 'address' => $address, 'id' => $id]);
                }
            }
        } else {
            // echo "No link found " . htmlspecialchars($error);
            $message = "No link found " . htmlspecialchars($error);
        }
    }
} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    $message = "An error occurred while processing your request. Please try again later.";
} catch (Exception $e) {
    error_log("General error: " . $e->getMessage());
    $message = "An error occurred while processing your request. Please try again later.";
}

$out_links = getOutgoingLinks($db, SB_DATA_TABLE);
$in_links = getIncomingLinks($db, SB_DATA_TABLE);

?>
<!DOCTYPE html>
<html lang="<?php echo $_SESSION['lang']; ?>">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Queue: <?php echo t('title'); ?></title>
    <meta http-equiv="refresh" content="90">
    <link rel="stylesheet" href="css/styles.css">
    <script src="js/auto_refresh.js"></script>
</head>

<body>
    <?php if ($message) {
        echo $message;
    } ?>
    <table border="0">
        <tr>
            <th colspan="2"><?php echo t('current_seeds_header'); ?></td>
        </tr>
        <?php echo $out_links ?>
        <tr>
            <th colspan="2"><?php echo t('newest_seeds_header'); ?></td>
        </tr>
        <?php echo $in_links ?>
        <tr>
            <td colspan="2"><a href="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>" target="_self"><?php echo t('refresh_link'); ?></a></td>
        </tr>
    </table>
</body>

</html>